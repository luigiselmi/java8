Challenge: Java Stack
=====================
In computer science, a stack or LIFO (last in, first out) is an abstract data type that serves as a collection of elements, 
with two principal operations: 

 - push, which adds an element to the collection
 - pop, which removes the last element that was added.
 
A string containing only parentheses is balanced if the following is true: 

 - 1. if it is an empty string 
 - 2. if A and B are correct, AB is correct, 
 - 3. if A is correct, (A) and {A} and [A] are also correct.

Examples of some correctly balanced strings are: "{}()", "[{()}]", "({()})"

Examples of some unbalanced strings are: "{}(", "({)}", "[[", "}{" etc.

Given a string, determine if it is balanced or not.

Input Format
============
There will be multiple lines in the input file, each having a single non-empty string. You should read input till end-of-file.
The part of the code that handles input operation is already provided in the editor.

Output Format:
for each case, print 'true' if the string is balanced, 'false' otherwise.

Sample input 1
==============
{}()
({()})
{}(
[]

Sample output:
true
true
false
true

Sample input 2
==============
({}[])
(({()})))
({(){}()})()({(){}()})(){()}
{}()))(()()({}}{}
}}}}
))))
{{{
(((
[]{}(){()}((())){{{}}}{()()}{{}{}}
[[]][][]
}{

Sample output:

true
false
true
false
false
false
false
false
true
true
false

Sample input 3
==============
[({})(())]
(({()})))[[
({(){}()})()({(){}()})(){()}{}((()))
{}()))(()()({}}{}
}}}}
))))
{{{
(((
{}(){()}((())){{{}}}{()()}{{}{}}
{{{{{{{)))))))))))))))))))
{}{}(
{}}}{}
()()()())))
(((((()()()
(){}{{}}()(()){{()()}}
{}{{{}}}{{{((()))}}}
((()))[]
{{}}(()[])

Sample output:
true
false
true
false
false
false
false
false
true
false
false
false
false
false
true
true
true
true

